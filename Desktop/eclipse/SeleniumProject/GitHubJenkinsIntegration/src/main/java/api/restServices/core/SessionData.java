package api.restServices.core;

import java.util.HashMap;
import java.util.Map;

import org.apache.http.client.methods.HttpRequestBase;

import selenium.common.date.SimpleDate;
import selenium.common.enums.Environment;

/**
 * Holds common data for a given "session".  Over the goal of this class is to 
 * help enable a template-style approach to for generating requests.
 * 
 * @author SonHuy.Pham@Disney.com
 */
public class SessionData {

    protected Map<String, String> cachedList = new HashMap<String, String>();
    protected boolean shouldUpdateCache = true;
    protected HttpRequestBase httpRequest = null;
    
    protected String token = "";
    protected String confId = "";
    protected String baseUrl = "api-latest.wdpro.starwave.com";
    /** TODO, We need to query the SE server pages to enable auto-detection */
    protected String serverInstance = "A";
    /** Used in building the HTTP header and specifies whether it should hit light or dark (i.e. A or B). */
    protected String poolOverride = "XXXXXXXXXXXXXXXXXXXXXXXXX";
    /** GUID generated by LAMP and TC servers, think of it as a PHP session ID */
    protected String conversationId = "BeepBeep123456";
    protected String acceptLanguage = "en-us";
    protected String swid = "";
    protected String cartId = "";
    protected String itemId = "";
    protected String orderId = "";
    protected String availabilityId = "";
    protected String userId = "default@wdpr-test.com";
    protected String userPw = "111111";
    protected String storeId = "wdw";
    protected String region = "US";
    protected String entityId = "";
    protected String entityType = "destination";
    /** This might be the same thing as storeId */
    protected String destination = "wdw";
    protected String searchDate = new SimpleDate().toString("yyyy-MM-dd");
    protected String filters = "theme-park";
    /** DisneylandResort, wdis_world, need to figure out what paris is - may benefit from enum */
    protected String affiliate = "wdis_world";
    protected String arriveDate = new SimpleDate().advanceMonth(1).toString("MM/dd/yyyy");
    protected String departDate = new SimpleDate().advanceMonth(1).advanceDay(2).toString("MM/dd/yyyy");
    protected String title = "Mr.";
    protected String firstName = "First";
    protected String lastName = "Last";
    protected String middleName = "M";
    protected String suffix = "";
    protected String phoneNumber = "123-456-7890";
    protected String birthDate = "1970-01-01";
    protected String address1 = "200 Celebration Place";
    protected String addressCity = "Celebration";
    protected String addressState = "FL";
    protected String addressCountry = "US";
    protected String addressZip = "34747";
    protected String questionCityBorn = "city";
    protected String questionFavoriteBand = "band";
    /** DLR, WDW */
    protected String touCodePrefix = "WDW";
    protected String itemQuantity = "1";
    
    public SessionData() {
        determineBaseUrl();
    }
    
    /**
     * We could possibly use reflection to generate this list.
     * 
     * @return A map of key-value pairs for programmatic search and replace,
     * particuarly for a generic and "templated" solution.
     */
    public Map<String, String> generateKeyValuePairs() {
        
        // Alternatively, we could update each field as it is "set". For now 
        // we'll lazily force a refresh of all fields for the sake of
        // simplicity.
        
        if(shouldUpdateCache) {
            
            // Most of this below helps build headers and request ends-points,
            // i.e. urls.
            cachedList.put("$$AUTH_TOKEN$$", token);
            cachedList.put("$$CONF_ID$$", confId);
            cachedList.put("$$BASE_URL$$", baseUrl);
            cachedList.put("$$POOL_OVERRIDE$$", poolOverride);
            cachedList.put("$$CONVERSATION_ID$$", conversationId);
            cachedList.put("$$ACCEPT_LANGUAGE$$", acceptLanguage);
            
            cachedList.put("$$SWID$$", swid);
            cachedList.put("$$CART_ID$$", cartId);
            cachedList.put("$$ITEM_ID$$", itemId);
            cachedList.put("$$ORDER_ID$$", orderId);
            cachedList.put("$$AVAILABILITY_ID$$", availabilityId);
            cachedList.put("$$USERNAME$$", userId);
            cachedList.put("$$USERNAME_ESCAPED$$", getUserIdEscaped(userId));
            cachedList.put("$$PASSWORD$$", userPw);
            cachedList.put("$$STORE_ID$$", storeId);
            cachedList.put("$$REGION$$", region);
            cachedList.put("$$SEARCH_DATE$$", searchDate);
            cachedList.put("$$FILTERS$$", filters);
            
            // Used for finder-service and a whole bunch more.
            cachedList.put("$$ENTITY_ID$$", entityId);
            cachedList.put("$$ENTITY_TYPE$$", entityType);
            cachedList.put("$$DESTINATION$$", destination);
            
            // General user information, generally used for user creation.
            cachedList.put("$$ARRIVE_DATE$$", arriveDate);
            cachedList.put("$$DEPART_DATE$$", departDate);
            cachedList.put("$$NAME_TITLE$$", title);
            cachedList.put("$$NAME_FIRST$$", firstName);
            cachedList.put("$$NAME_MIDDLE$$", middleName);
            cachedList.put("$$NAME_LAST$$", lastName);
            cachedList.put("$$NAME_SUFFIX$$", suffix);
            
            cachedList.put("$$PHONE_NUMBER$$", phoneNumber);
            cachedList.put("$$BIRTHDATE$$", birthDate);
            cachedList.put("$$ADDR_LINE1$$", address1);
            cachedList.put("$$ADDR_CITY$$", addressCity);
            cachedList.put("$$ADDR_STATE$$", addressState);
            cachedList.put("$$ADDR_COUNTRY$$", addressCountry);
            cachedList.put("$$ADDR_ZIP$$", addressZip);
            cachedList.put("$$QUESTION_CITY_BORN$$", questionCityBorn);
            cachedList.put("$$QUESTION_BAND$$", questionFavoriteBand);
            cachedList.put("$$TOU_CODE_PREFIX$$", touCodePrefix);
            cachedList.put("$$AFFILIATE$$", affiliate);
            shouldUpdateCache = false;
        }
        return cachedList;
    }
    
    /**
     * Given a string with a bunch of tokens, 
     * @param kvPairs
     * @param str
     * @return
     */
    public String searchAndReplaceTemplate(Map<String, String> kvPairs, String str) {
        String result = str;
        for(String key : kvPairs.keySet()) {
            // Search first and avoid constantly rebuilding the string. 
            if(result.contains(key)) {
                String search = key.replaceAll("\\$", "\\\\\\$");
                result = result.replaceAll(search, kvPairs.get(key));
            }
        }
        return result;
    }
    
    /**
     * Random but not guaranteed unique.
     * @return
     */
    public static String generateRandomUsername() {
        String randomFirst = Long.toHexString(Double.doubleToLongBits(Math.random()));               
        String randomSecond = Long.toHexString(Double.doubleToLongBits(Math.random()));
        String randomThird = Long.toHexString(Double.doubleToLongBits(Math.random()));
        String userName = (randomFirst + randomSecond + randomThird);
        
        userName = userName.substring(0, 10) + "@here.com";
                
        return userName;
    }
    
    /**
     * Method to set current token value. Need to set the value first time in 
     * order to pass authz token through the testing process.
     */
    public void determineBaseUrl() {
        if (Environment.isLatest()) {
            baseUrl = "api-latest.wdpro.starwave.com";
        } else if (Environment.isStage()) {
            baseUrl = "api-stage.wdpro.starwave.com";
        } else if (Environment.isENV4()) {
        	baseUrl = "api-latest.wdpro.starwave.com";
        } else if (Environment.isENV2()) {
        	baseUrl = "api-qa.wdpro.disney.go.com:8088";
        } else if (Environment.isSoftLaunch()) {
            baseUrl = "api.wdpro.disney.go.com";
        } else if (Environment.isShadow()) {
            baseUrl = "api-shadow.wdpro.starwave.com";
        } else if (Environment.isProduction()) {
            baseUrl = "api.wdpro.disney.go.com";
        } else {
            baseUrl = "api-qa.wdpro.disney.go.com";
        }
    }
    
    protected void determinePoolOverride() {
        
        if (Environment.isShadow() || Environment.isLatest() || Environment.isStage() || Environment.isENV2() || Environment.isENV4()){
            poolOverride = "XXXXXXXXXXXXXXXXXXXXXXXXX";
            
        } else if (Environment.isProduction()) {
            poolOverride = serverInstance.equals("A") ? 
                "AAAAAAAAAAAAAAAAAAAAAAAAA" : 
                "BBBBBBBBBBBBBBBBBBBBBBBBB";
            
        } else if (Environment.isSoftLaunch()) {
            poolOverride = serverInstance.equals("B") ? 
                "AAAAAAAAAAAAAAAAAAAAAAAAA" : 
                "BBBBBBBBBBBBBBBBBBBBBBBBB";
            
        } else {
            poolOverride = "CCCCCCCCCCCCCCCCCCCCCCCCC";
            
        }
    }
    
    /**
     * @see {@link #setHttpRequest(HttpRequestBase)}
     * 
     * @return
     */
    public HttpRequestBase getHttpRequest() {
        return httpRequest;
    }

    /**
     * This should be used to save a snapshot of the MOST PREVIOUS request.
     * This will not help generate the actual request.
     * 
     * @param httpRequest
     */
    public void setHttpRequest(HttpRequestBase httpRequest) {
        this.httpRequest = httpRequest;
    }

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        shouldUpdateCache = true;
        this.token = token;
    }
    
    public void setConfId(String token) {
        shouldUpdateCache = true;
        this.confId = token;
    }

    public String getBaseUrl() {
        return baseUrl;
    }
    
    public void setBaseUrl(String baseUrl) {
        shouldUpdateCache = true;
        this.baseUrl = baseUrl;
    }

    public String getPoolOverride() {
        return poolOverride;
    }

    public void setPoolOverride(String poolOverride) {
        shouldUpdateCache = true;
        this.poolOverride = poolOverride;
    }

    public String getConversationId() {
        return conversationId;
    }
    
    public String getConfId() {
        return confId;
    }

    public void setConversationId(String conversationId) {
        shouldUpdateCache = true;
        this.conversationId = conversationId;
    }
    
    public String getAcceptLanguage() {
        return acceptLanguage;
    }

    public void setAcceptLanguage(String acceptLanguage) {
        shouldUpdateCache = true;
        this.acceptLanguage = acceptLanguage;
    }

    public String getSwid() {
        return swid;
    }

    public void setSwid(String swid) {
        shouldUpdateCache = true;
        this.swid = swid;
    }

    public String getCartId() {
        return cartId;
    }

    public void setCartId(String cartId) {
        shouldUpdateCache = true;
        this.cartId = cartId;
    }
    
    public String getItemId() {
        return itemId;
    }

    public void setItemId(String itemId) {
        shouldUpdateCache = true;
        this.itemId = itemId;
    }
    
    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(String orderId) {
        shouldUpdateCache = true;
        this.orderId = orderId;
    }
    
    public String getAvailabilityId() {
        return availabilityId;
    }

    public void setAvailabilityId(String availabilityId) {
        shouldUpdateCache = true;
        this.availabilityId = availabilityId;
    }
    
    public String getServerInstance() {
        return serverInstance;
    }

    public void setServerInstance(String serverInstance) {
        shouldUpdateCache = true;
        this.serverInstance = serverInstance;
        determinePoolOverride();
    }

    /**
     * Handy for those raw http requests.
     * @param userId
     * @return
     */
    public String getUserIdEscaped(String userId) {
        return userId.replaceAll("\\@", "\\%40");
    }
    
    public String getUserId() {
        return userId;
    }
    
    public void setUserId(String userId) {
        shouldUpdateCache = true;
        this.userId = userId;
    }
    
    public String getUserPw() {
        return userPw;
    }

    public void setUserPw(String userPw) {
        shouldUpdateCache = true;
        this.userPw = userPw;
    }

    public String getStoreId() {
        return storeId;
    }

    public void setStoreId(String storeId) {
        shouldUpdateCache = true;
        this.storeId = storeId;
    }

    public String getRegion() {
        return region;
    }

    public void setRegion(String region) {
        shouldUpdateCache = true;
        this.region = region;
    }

    public String getArriveDate() {
        return arriveDate;
    }

    public void setArriveDate(String arriveDate) {
        shouldUpdateCache = true;
        this.arriveDate = arriveDate;
    }

    public String getDepartDate() {
        return departDate;
    }

    public void setDepartDate(String departDate) {
        shouldUpdateCache = true;
        this.departDate = departDate;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        shouldUpdateCache = true;
        this.title = title;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        shouldUpdateCache = true;
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        shouldUpdateCache = true;
        this.lastName = lastName;
    }

    public String getMiddleName() {
        return middleName;
    }

    public void setMiddleName(String middleName) {
        shouldUpdateCache = true;
        this.middleName = middleName;
    }
    
    public String getPhoneNumber() {
        return phoneNumber;
    }
    
    public void setPhoneNumber(String phoneNumber) {
        shouldUpdateCache = true;
        this.phoneNumber = phoneNumber;
    }
    
    public String getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(String birthDate) {
        shouldUpdateCache = true;
        this.birthDate = birthDate;
    }

    public String getAddress1() {
        return address1;
    }

    public void setAddress1(String address1) {
        shouldUpdateCache = true;
        this.address1 = address1;
    }

    public String getAddressCity() {
        return addressCity;
    }

    public void setAddressCity(String addressCity) {
        shouldUpdateCache = true;
        this.addressCity = addressCity;
    }

    public String getAddressState() {
        return addressState;
    }

    public void setAddressState(String addressState) {
        shouldUpdateCache = true;
        this.addressState = addressState;
    }

    public String getAddressCountry() {
        return addressCountry;
    }

    public void setAddressCountry(String addressCountry) {
        shouldUpdateCache = true;
        this.addressCountry = addressCountry;
    }

    public String getAddressZip() {
        return addressZip;
    }

    public void setAddressZip(String addressZip) {
        shouldUpdateCache = true;
        this.addressZip = addressZip;
    }

    public String getQuestionCityBorn() {
        return questionCityBorn;
    }

    public void setQuestionCityBorn(String questionCityBorn) {
        shouldUpdateCache = true;
        this.questionCityBorn = questionCityBorn;
    }

    public String getQuestionFavoriteBand() {
        return questionFavoriteBand;
    }

    public void setQuestionFavoriteBand(String questionFavoriteBand) {
        shouldUpdateCache = true;
        this.questionFavoriteBand = questionFavoriteBand;
    }

    public String getTouCodePrefix() {
        return touCodePrefix;
    }

    public void setTouCodePrefix(String touCodePrefix) {
        shouldUpdateCache = true;
        this.touCodePrefix = touCodePrefix;
    }

    public String getAffiliate() {
        return affiliate;
    }

    public void setAffiliate(String affiliate) {
        shouldUpdateCache = true;
        this.affiliate = affiliate;
    }
    
    public String getItemQuantity() {
        return itemQuantity;
    }

    public void setItemQuantity(String itemQuantity) {
        shouldUpdateCache = true;
        this.itemQuantity = itemQuantity;
    }

    public String getEntityId() {
        return entityId;
    }

    public void setEntityId(String entityId) {
        shouldUpdateCache = true;
        this.entityId = entityId;
    }

    public String getEntityType() {
        return entityType;
    }

    public void setEntityType(String entityType) {
        shouldUpdateCache = true;
        this.entityType = entityType;
    }

    public String getDestination() {
        return destination;
    }

    public void setDestination(String destination) {
        shouldUpdateCache = true;
        this.destination = destination;
    }

    public String getSearchDate() {
        return searchDate;
    }

    public void setSearchDate(String searchDate) {
        shouldUpdateCache = true;
        this.searchDate = searchDate;
    }

    public String getFilters() {
        return filters;
    }

    public void setFilters(String filters) {
        shouldUpdateCache = true;
        this.filters = filters;
    }

	public String getSuffix() {
		return suffix;
	}

	public void setSuffix(String suffix) {
		shouldUpdateCache = true;
		this.suffix = suffix;
	}
}

